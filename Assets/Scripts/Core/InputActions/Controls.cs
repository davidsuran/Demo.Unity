//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerMoving"",
            ""id"": ""2152bb3c-3af6-452a-b7f5-1eb3814784d8"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""937ad621-3a17-4b35-92e4-b3a327537e53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d1068bdb-884e-46d2-8df4-44aa1bb6dd2f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""26a7536f-1637-4083-a5e7-feb73b331a3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f016c507-46b2-4c7a-8bfb-c6ed6e174501"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac540a3b-8070-49e1-a980-cc676f504d9a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2e16beaa-ecf0-447a-88ed-1b5dd7522a84"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""217618e2-ba24-41f5-816c-b7fe7812ef4e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ab52cc9a-beff-4ab2-ba05-ea4a4303ed01"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f9b2d36-16ee-44b7-99c3-e8441bc93476"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52abb236-003f-44a6-9c76-b8f96a85c03f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""473c3e48-10e6-44ed-aac5-08e9b6ed9da2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff4be6f4-678c-4f11-aa64-a80cc230e54d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f066b770-b36f-4c17-830e-16033fcf8ef0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAiming"",
            ""id"": ""171ab3b7-45e4-4fa2-b525-f566cf31f68a"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""82dc4b13-6a36-404e-88bf-d306ff5b0ed0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelAiming"",
                    ""type"": ""Button"",
                    ""id"": ""bf5a1f6b-c6d7-42fd-98d3-3e2f88c86f9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02431cdd-ad58-4b3e-a0a5-eff54d2f0786"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""719efa6e-657a-4bbe-9215-92be4106128d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25140ad0-78fc-40d8-938d-d2aaf0ab62e4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""CancelAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db18e0a3-9a7a-44fc-99e9-31fe4c49f2c0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CancelAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerBase"",
            ""id"": ""53885e8b-cbb1-423e-aa78-0018cbc93fcb"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f1545873-cc4b-4bf1-9213-4d45924b985d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2dae182-0f7a-4447-a1bc-f1e4a70070e6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97395cb5-7d2d-47c9-bf53-0be4f4c35464"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMoving
        m_PlayerMoving = asset.FindActionMap("PlayerMoving", throwIfNotFound: true);
        m_PlayerMoving_Jump = m_PlayerMoving.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMoving_Move = m_PlayerMoving.FindAction("Move", throwIfNotFound: true);
        m_PlayerMoving_Aim = m_PlayerMoving.FindAction("Aim", throwIfNotFound: true);
        // PlayerAiming
        m_PlayerAiming = asset.FindActionMap("PlayerAiming", throwIfNotFound: true);
        m_PlayerAiming_Shoot = m_PlayerAiming.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerAiming_CancelAiming = m_PlayerAiming.FindAction("CancelAiming", throwIfNotFound: true);
        // PlayerBase
        m_PlayerBase = asset.FindActionMap("PlayerBase", throwIfNotFound: true);
        m_PlayerBase_Look = m_PlayerBase.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMoving
    private readonly InputActionMap m_PlayerMoving;
    private IPlayerMovingActions m_PlayerMovingActionsCallbackInterface;
    private readonly InputAction m_PlayerMoving_Jump;
    private readonly InputAction m_PlayerMoving_Move;
    private readonly InputAction m_PlayerMoving_Aim;
    public struct PlayerMovingActions
    {
        private @Controls m_Wrapper;
        public PlayerMovingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerMoving_Jump;
        public InputAction @Move => m_Wrapper.m_PlayerMoving_Move;
        public InputAction @Aim => m_Wrapper.m_PlayerMoving_Aim;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMoving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovingActions instance)
        {
            if (m_Wrapper.m_PlayerMovingActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnMove;
                @Aim.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_PlayerMovingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public PlayerMovingActions @PlayerMoving => new PlayerMovingActions(this);

    // PlayerAiming
    private readonly InputActionMap m_PlayerAiming;
    private IPlayerAimingActions m_PlayerAimingActionsCallbackInterface;
    private readonly InputAction m_PlayerAiming_Shoot;
    private readonly InputAction m_PlayerAiming_CancelAiming;
    public struct PlayerAimingActions
    {
        private @Controls m_Wrapper;
        public PlayerAimingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_PlayerAiming_Shoot;
        public InputAction @CancelAiming => m_Wrapper.m_PlayerAiming_CancelAiming;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAiming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAimingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAimingActions instance)
        {
            if (m_Wrapper.m_PlayerAimingActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnShoot;
                @CancelAiming.started -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnCancelAiming;
                @CancelAiming.performed -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnCancelAiming;
                @CancelAiming.canceled -= m_Wrapper.m_PlayerAimingActionsCallbackInterface.OnCancelAiming;
            }
            m_Wrapper.m_PlayerAimingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @CancelAiming.started += instance.OnCancelAiming;
                @CancelAiming.performed += instance.OnCancelAiming;
                @CancelAiming.canceled += instance.OnCancelAiming;
            }
        }
    }
    public PlayerAimingActions @PlayerAiming => new PlayerAimingActions(this);

    // PlayerBase
    private readonly InputActionMap m_PlayerBase;
    private IPlayerBaseActions m_PlayerBaseActionsCallbackInterface;
    private readonly InputAction m_PlayerBase_Look;
    public struct PlayerBaseActions
    {
        private @Controls m_Wrapper;
        public PlayerBaseActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_PlayerBase_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBase; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBaseActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBaseActions instance)
        {
            if (m_Wrapper.m_PlayerBaseActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerBaseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerBaseActions @PlayerBase => new PlayerBaseActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerMovingActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
    public interface IPlayerAimingActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnCancelAiming(InputAction.CallbackContext context);
    }
    public interface IPlayerBaseActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
}
